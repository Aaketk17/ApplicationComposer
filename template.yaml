Transform: AWS::Serverless-2016-10-31
Resources:
  ACDemoAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: ACDemoAPIGateway
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /write:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${writeData.Arn}/invocations
              responses: {}
          /signedUrl:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${signedUrl.Arn}/invocations
              responses: {}
          /readAll:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${readData.Arn}/invocations
              responses: {}
          /update/{id}:
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${updateData.Arn}/invocations
              responses: {}
          /delete/{id}:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteData.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  readData:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: readData
      CodeUri: src/ReadData
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref ACDemoTable
          TABLE_ARN: !GetAtt ACDemoTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ACDemoTable
      Events:
        ACDemoAPIGatewayGETreadAll:
          Type: Api
          Properties:
            Path: /readAll
            Method: GET
            RestApiId: !Ref ACDemoAPIGateway
  readDataLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${readData}
  writeData:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: writeData
      CodeUri: src/writeData
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref ACDemoTable
          TABLE_ARN: !GetAtt ACDemoTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ACDemoTable
      Events:
        ACDemoAPIGatewayPOSTwrite:
          Type: Api
          Properties:
            Path: /write
            Method: POST
            RestApiId: !Ref ACDemoAPIGateway
  writeDataLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${writeData}
  updateData:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: updateData
      CodeUri: src/updateData
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref ACDemoTable
          TABLE_ARN: !GetAtt ACDemoTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ACDemoTable
      Events:
        ACDemoAPIGatewayPUTupdateid:
          Type: Api
          Properties:
            Path: /update/{id}
            Method: PUT
            RestApiId: !Ref ACDemoAPIGateway
  updateDataLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${updateData}
  signedUrl:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: signedUrl
      CodeUri: src/signedUrl
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          BUCKET_NAME: !Ref ACDemoBucket2023Medium
          BUCKET_ARN: !GetAtt ACDemoBucket2023Medium.Arn
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ACDemoBucket2023Medium
      Events:
        ACDemoAPIGatewayPOSTsignedUrl:
          Type: Api
          Properties:
            Path: /signedUrl
            Method: POST
            RestApiId: !Ref ACDemoAPIGateway
  signedUrlLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${signedUrl}
  deleteData:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: deleteData
      CodeUri: src/deleteData
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref ACDemoTable
          TABLE_ARN: !GetAtt ACDemoTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ACDemoTable
      Events:
        ACDemoAPIGatewayDELETEdeleteid:
          Type: Api
          Properties:
            Path: /delete/{id}
            Method: DELETE
            RestApiId: !Ref ACDemoAPIGateway
  deleteDataLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${deleteData}
  ACDemoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  ACDemoBucket2023Medium:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-acdemobuc-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
  ACDemoBucket2023MediumBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ACDemoBucket2023Medium
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: s3:GetObject
            Effect: Allow
            Resource:
              - !GetAtt ACDemoBucket2023Medium.Arn
              - !Sub ${ACDemoBucket2023Medium.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Lambda Functions
      Members:
        - writeData
        - updateData
        - deleteData
        - signedUrl
        - readData
Outputs:
  ApiUrl:
    Value: !Sub https://${ACDemoAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod
    Description: The URL of the API Gateway.